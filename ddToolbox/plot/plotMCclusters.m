function plotMCclusters(mcmcContainer, data, col, probMass, pointEstimateType)
% TODO: TURN THIS INTO A "GROUPBivariateDistribution" PLOT CLASS

% plot posteriors over (m,c) for all participants, as contour plots

figure(12), clf

% build samples
for p = 1:data.nParticipants
	m(:,p) = mcmcContainer.getSamplesFromParticipantAsMatrix(p, {'m'});
	c(:,p) = mcmcContainer.getSamplesFromParticipantAsMatrix(p, {'c'});
end

mcBivariateParticipants = mcmc.BivariateDistribution(...
	m,...
	c,...
	'xLabel','m',...
	'yLabel','c',...
	'plotStyle','contour',...
	'probMass',probMass,...
	'pointEstimateType','mode',...
	'patchProperties',definePlotOptions4Participant(col));

% TODO: enable this functionality in BivariateDistribution
% % plot numbers
% for p = 1:data.nParticipants
% 	text(mcBivariate.mode(1),mcBivariate.mode(2),...
% 		sprintf('%d',p),...
% 		'HorizontalAlignment','center',...
% 		'VerticalAlignment','middle',...
% 		'FontSize',9,...
% 		'Color',col)
% end

% keep axes zoomed in on all participants
axis tight
participantAxisBounds = axis;

mcBivariateGroup = mcmc.BivariateDistribution(...
	mcmcContainer.getSamplesAsMatrix({'m_group'}),...
	mcmcContainer.getSamplesAsMatrix({'c_group'}),... %xLabel',variableNames{1},'yLabel',variableNames{2},...
	'plotStyle','contour',...
	'probMass',probMass,...
	'pointEstimateType',pointEstimateType,...
	'patchProperties',definePlotOptions4Group(col));

axis(participantAxisBounds)
set(gca,'XAxisLocation','origin')
set(gca,'YAxisLocation','origin')
drawnow

	function plotOpts = definePlotOptions4Participant(col)
		plotOpts = {'FaceAlpha', 0.1,...
			'FaceColor', col,...
			'LineStyle', 'none'};
	end

	function plotOpts = definePlotOptions4Group(col)
		plotOpts = {'FaceColor', 'none',...
			'EdgeColor', col,...
			'LineWidth', 2};
	end
end
