# JAGS model for delay discounting.
# - model of multiple participants
# - models the magnitude effect
# - separate parameters (for each participant) for lapse rate and alpha
# - Heirachical estimation (group-level) estimates of magnitude effect parameters (m, c).

model{

    # ------------------------------------------------------------------------------------
    # Group-level hyperpriors (see Appendix A1 and A2 for details)

    # slope (uninformative, see Appendix A)
    groupMmu        ~ dnorm(-0.243, 1/( (0.027*10)^2))
    groupMsigma     ~ dnorm( 0.072, 1/( (0.025*10)^2)) T(0,)

    # intercept 
    groupCmu        ~ dnorm(0, 1/(10000^2))
    groupCsigma     ~ dunif(0, 10000) 
    
    # comparison acuity (alpha)
    groupALPHAmu        ~ dunif(0,10000)
    groupALPHAsigma     ~ dunif(0,10000)

    # error rates (epsilon)
    groupW          ~ dbeta(1.1, 10.9)  # mode for lapse rate
    groupKminus2    ~ dgamma(0.01,0.01) # concentration parameter
    groupK          <- groupKminus2+2


    # ------------------------------------------------------------------------------------
    # Sample hyperpriors (Make sure values correspond to the priors given above)
    # We draw these samples, that are independent from the data, so that we can plot our prior beliefs of group-level parameters. These will be determined by the actual values given in the priors. 
    # IMPORTANT - Make sure the numerical values you provide below match the priors above.

    # slope 
    glMprior        ~ dnorm(groupMmuprior, 1/(groupMsigmaprior^2))
    groupMmuprior   ~ dnorm(-0.243, 1/( (0.027*10)^2))
    groupMsigmaprior~ dnorm( 0.072, 1/( (0.025*10)^2)) T(0,)

    # intercept (sample from the prior, independent from the data)
    glCprior             ~ dnorm(groupCmuprior, 1/(groupCsigmaprior^2))
    groupCmuprior        ~ dnorm(0, 1/(10000^2))
    groupCsigmaprior     ~ dunif(0, 10000) 

    # comparison acuity 
    glALPHAprior         ~ dnorm(groupALPHAmu, 1/(groupALPHAsigma^2)) T(0,)
    groupALPHAmuprior    ~ dunif(0,10000)
    groupALPHAsigmaprior ~ dunif(0,10000)

    # error rates 
    glEpsilonprior       ~ dbeta(groupWprior*(groupKprior-2)+1 , (1-groupWprior)*(groupKprior-2)+1 ) T(,0.5)
    groupWprior          ~ dbeta(1.1, 10.9)  # mode for lapse rate
    groupKminus2prior    ~ dgamma(0.01,0.01) # concentration parameter
    groupKprior          <- groupKminus2prior+2


    # ------------------------------------------------------------------------------------
    # Group-level posteriors. Samples from these group-level posteriors are obviously influenced by the actual data themselves. These samples can be seen as inferences about an as yet unobserved participant who represents what we know about the parameters at the group level.

    glM             ~ dnorm(groupMmu, 1/(groupMsigma^2))
    glC             ~ dnorm(groupCmu, 1/(groupCsigma^2))
    glALPHA         ~ dnorm(groupALPHAmu, 1/(groupALPHAsigma^2)) T(0,)
    glEpsilon       ~ dbeta(groupW*(groupK-2)+1 , (1-groupW)*(groupK-2)+1 ) T(,0.5)


    # ------------------------------------------------------------------------------------
    # Participant-level 
    # HIERACHICAL i.e. parameter estimates for each person. Each variable is drawn from a group-level distribution.
    for (p in 1:nParticipants){
        # magnitide effect (m,c) for each person
        m[p]        ~ dnorm(groupMmu, 1/(groupMsigma^2))
        c[p]        ~ dnorm(groupCmu, 1/(groupCsigma^2))
        epsilon[p]  ~ dbeta(groupW*(groupK-2)+1 , (1-groupW)*(groupK-2)+1 ) T(,0.5)
        alpha[p]    ~ dnorm(groupALPHAmu, 1/(groupALPHAsigma^2)) T(0,)
    }

    for (p in 1:nParticipants){

        # ------------------------------------------------------------------------------------
        # Trial-level

        for (t in 1:T[p]) {  

            # Calculate log discount rate for each reward
            lkA[p,t] <- m[p]*log(abs(A[p,t]))+c[p]
            lkB[p,t] <- m[p]*log(abs(B[p,t]))+c[p]

            # calculate present subjective value for each reward
            VA[p,t] <- A[p,t] / (1+(exp(lkA[p,t])*DA[p,t]))
            VB[p,t] <- B[p,t] / (1+(exp(lkB[p,t])*DB[p,t]))

            # psychometric function
            P[p,t] <- epsilon[p] + (1-2*epsilon[p]) * phi( (VB[p,t]-VA[p,t]) / alpha[p] )

            # response
            R[p,t] ~ dbin(P[p,t],1)
        }
    }
}
