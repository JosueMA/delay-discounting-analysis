# Discount rate modelled as a Gaussian Random Walk :)

# Observed data being provided:
# - participantIndexList
# - T
# - A, DA, B, DB, T
# - uniqueDelays
# - delayLookUp[p,t] is an index into the delay

# Parameters
# - alpha
# - epsilon
# - discountFraction: a vector of params, one for each unique delay


model{

    alpha <- 10
  # --------------------------------------------------------------------------
  # Group-level hyperpriors

  # variance increase per unit time
  varInc <- 0.005 # DO INFERENCE OVER THIS RATHER THAN SETTING ITS VALUE



  # error rates (epsilon)
  groupW          ~ dbeta(1.1, 10.9)  # mode for lapse rate
  groupKminus2    ~ dgamma(0.5,0.5) # concentration parameter ## UPDATED SINCE PAPER
  groupK          <- groupKminus2+2


  # --------------------------------------------------------------------------
  # Participant-level parameters
  for (p in participantIndexList){

    epsilon[p]  ~ dbeta(groupW*(groupK-2)+1 , (1-groupW)*(groupK-2)+1 ) T(,0.5)

    # GAUSSIAN RANDOM WALK PRIORS
    # Discount fractions are always >=0
    # Discount fractions are normally <1, however people might anti-discount and so could be >1

    # First delay: We assume that the discount fraction at delay=0 is equal to 1. Anything else doesn't make sense. So the first delay will be normally distributed around 1, with variance proportional to that delay.

    discountFraction[p,1] ~ dnorm(1, 1/(uniqueDelays[1]*varInc)) T[0,]

    # Subsequently: The indifference points for the rest of the delays are normally distributed around the indifference point of the previous delay, with variance proportional to the duration between those rewards (following the variance sum law).

    for (d in 2:length(uniqueDelays)){
        discountFraction[p,d] ~ dnorm( discountFraction[p,d-1], 1/ (varInc * (uniqueDelays[d]-uniqueDelays[d-1]))) T[0,]
    }

  }

  for (p in participantIndexList){
    for (t in 1:T[p]) {

        # A is always the immediate reward
        # B is always the delayed reward
        # Typically |B|>|A| for discounting ????????????

      # calculate present subjective value for each reward
      VA[p,t] <- (A[p,t]) * discountFraction[p, delayLookUp[p,t] ]
      VB[p,t] <- (B[p,t]) * discountFraction[p, delayLookUp[p,t] ]

      # Psychometric function
      # P is prob of choosing delayed reward (B).
      # This will happen generally when VB>VA
      P[p,t] <- epsilon[p] + (1-2*epsilon[p]) * phi( (VB[p,t]-VA[p,t]) / alpha )

      # response
      R[p,t] ~ dbern(P[p,t])

    }
  }


  # #############################################
  # GENERATED QUANTITIES ########################

  # Sample hyperpriors (Make sure values correspond to the priors given above)
  # We draw these samples, that are independent from the data, so that we can plot our prior beliefs of group-level parameters. These will be determined by the actual values given in the priors.
  # IMPORTANT - Make sure the numerical values you provide below match the priors above.



  # error rates
  groupW_prior          ~ dbeta(1.1, 10.9)  # mode for lapse rate
  groupKminus2_prior    ~ dgamma(0.5,0.5) # concentration parameter
  groupK_prior          <- groupKminus2_prior+2

  # Prior beliefs about the group level (equivalently, an as yet unobserved participant). As determined by priors on parameters specified above
  epsilon_group_prior  ~ dbeta(groupW_prior*(groupK_prior-2)+1 , (1-groupW_prior)*(groupK_prior-2)+1 ) T(,0.5)



  # Group-level posterior predictive distributions. These samples can be seen as inferences about an as yet unobserved participant who represents what we know about the parameters at the group level.
  epsilon_group ~ dbeta(groupW*(groupK-2)+1 , (1-groupW)*(groupK-2)+1 ) T(,0.5)


  for (p in participantIndexList){
    for (t in 1:T[p]) {
      Rpostpred[p,t] ~ dbern(P[p,t])
    }
  }
}
